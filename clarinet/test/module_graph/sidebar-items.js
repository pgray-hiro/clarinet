initSidebarItems({"enum":[["BundleType",""],["GraphError","A group of errors that represent errors that can occur when interacting with a module graph."],["ModuleSlot",""],["TypeLib","Represents the “default” type library that should be used when type checking the code in the module graph.  Note that a user provided config of `\"lib\"` would override this value."],["TypeScriptReference","An enum which represents the parsed out values of references in source code."]],"fn":[["get_version","A hashing function that takes the source code, version and optionally a user provided config and generates a string hash which can be stored to determine if the cached emit is valid or not."],["parse_deno_types","Determine if a comment contains a `@deno-types` pragma and optionally return its value."],["parse_ts_reference","Determine if a comment contains a triple slash reference and optionally return its kind and value."],["to_module_result","Convert a specifier and a module slot in a result to the module source which is needed by Deno core for loading the module."]],"struct":[["BundleLoader","A structure for handling bundle loading, which is implemented here, to avoid a circular dependency with `ast`."],["BundleOptions",""],["CheckOptions",""],["DENO_TYPES_RE","Matched the `@deno-types` pragma."],["EmitOptions",""],["Graph","A dependency graph of modules, were the modules that have been inserted via the builder will be loaded into the graph.  Also provides an interface to be able to manipulate and handle the graph."],["GraphBuilder","A structure for building a dependency graph of modules."],["Module","A logical representation of a module within a graph."],["PATH_REFERENCE_RE","Matches a path reference, which adds a dependency to a module"],["ResultInfo","A structure that provides information about a module graph result."],["Stats",""],["TRIPLE_SLASH_REFERENCE_RE","Matches a `/// <reference ... />` comment reference."],["TYPES_REFERENCE_RE","Matches a types reference, which for JavaScript files indicates the location of types to use when type checking a program that includes it as a dependency."],["TranspileOptions","A structure which provides options when transpiling modules."]]});